<?php

/**
 * @file
 * The farmOS Crop Plan module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\farm_crop_plan\Bundle\CropPlanting;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function farm_crop_plan_entity_bundle_info_alter(array &$bundles): void {
  if (isset($bundles['plan_record']['crop_planting'])) {
    $bundles['plan_record']['crop_planting']['class'] = CropPlanting::class;
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function farm_crop_plan_plan_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {

  // If this is not a crop plan in full view mode, bail.
  if (!($entity->bundle() == 'crop' && $view_mode == 'full')) {
    return;
  }

  // If there are no crop plantings, bail.
  if (empty(\Drupal::service('farm_crop_plan')->getCropPlantings($entity))) {
    return;
  }

  // Render the crop plan timeline.
  $build['crop_plan_timeline'] = \Drupal::formBuilder()->getForm('Drupal\farm_crop_plan\Form\CropPlanTimelineForm', $entity);
}

/**
 * Implements hook_farm_ui_theme_region_items().
 */
function farm_crop_plan_farm_ui_theme_region_items(string $entity_type) {

  // Position the crop plan timeline in the top region.
  if ($entity_type == 'plan') {
    return [
      'top' => [
        'crop_plan_timeline',
      ],
    ];
  }
  return [];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function farm_crop_plan_form_plan_record_crop_planting_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Hide plan and plant fields in crop_planting edit forms.
  if (!empty($form['plan'])) {
    $form['plan']['#access'] = FALSE;
  }
  if (!empty($form['plant'])) {
    $form['plant']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function farm_crop_plan_form_quick_form_planting_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Alter the planting quick form, if a crop plan was specified.
  /** @var \Drupal\plan\Entity\PlanInterface $plan */
  $plan = \Drupal::entityTypeManager()->getStorage('plan')->load(\Drupal::request()->query->get('plan'));
  if (is_null($plan) || $plan->bundle() !== 'crop') {
    return;
  }

  // Save the plan ID.
  $form['plan_id'] = [
    '#type' => 'value',
    '#value' => $plan->id(),
  ];

  // If the crop plan has a season, set the plant season default value.
  if (!empty($plan->get('season')->referencedEntities())) {
    $form['seasons']['#default_value'] = $plan->get('season')->referencedEntities();
  }

  // Add a submit function that will redirect to the "Add planting" form with
  // the new plant asset pre-populated.
  $form['#submit'][] = 'farm_crop_plan_planting_quick_form_submit';
}

/**
 * Planting quick form submit function.
 */
function farm_crop_plan_planting_quick_form_submit(array $form, FormStateInterface $form_state) {

  // Find the asset that was just created.
  $asset_id = \Drupal::database()->query("SELECT entity_id FROM {asset__quick} WHERE quick_value = 'planting' ORDER BY entity_id DESC LIMIT 1")->fetchField();

  // Redirect to the "Add planting" form with the asset ID pre-populated.
  $form_state->setRedirect('farm_crop_plan.add_planting', ['plan' => $form_state->getValue('plan_id')], ['query' => ['plant' => $asset_id]]);
}
